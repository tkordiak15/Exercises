{"title":"Ecosystem Science and Sustainability 330","markdown":{"yaml":{"title":"Ecosystem Science and Sustainability 330","author":[{"name":"Tayler Kordiak"}],"format":"html","subtitle":"Quantitative Reasoning for Ecosystem Science"},"headingText":"COVID-19 Data","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n### Data\n\nWe are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like [this](https://www.nytimes.com/interactive/2020/us/coronavirus-spread.html?referringSource=articleShare), and are archived on a GitHub repo [here](https://github.com/nytimes/covid-19-data). Looking at the README in this repository we read:\n\n> \"We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography ... the historical files are the final counts at the end of each day ... The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available\"\n\nFor this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:\n\n```{r, eval = FALSE}\nhttps://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv\n```\n\n### Start\n\nI will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called \"url\"; and I am reading that URL into an object called `covid`\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nurl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'\ncovid = read_csv(url)\nhead(covid, 5)\n```\n\nHint: You can print the top X rows of a `data.frame` with `slice`.\n\n```{r, eval = FALSE}\nslice(covid, 1:5)\n```\n\nto print the top 5 columns of the raw covid `object`\n\n## Question 1:\n\nUse `dplyr` verbs to create a data.frame of the **5** counties with the most current cases. Remember, the cases and deaths are cumulative, so you only need to deal with the data for the most current (`max`) date.\n\n(**Hint:** `filter`, `arrange`, `slice`)\n\n```{r}\ncovid_recent <- covid %>% filter(date == max(date)) %>% arrange(desc(cases)) %>% slice(1:5)\n```\n\n## Question 2:\n\nUse `dplyr` verbs to create a data.frame of the **5** states with the *most* cases current cases.\n\n(**Hint:** `filter`, `group_by`, `summarize`, `arrange`, `slice`)\n\n```{r}\nmost_current_cases <-covid %>% filter(date == max(date)) %>% group_by(state) %>% summarize(total_cases = sum(cases, na.rm = TRUE)) %>% arrange(desc(total_cases)) %>% slice(1:5)\n```\n\n## Question 3:\n\nUse the `dplyr` verbs to report the **5** counties with the *worst* current death/cases ratio: (e.g.$100* (deaths/cases)$)\n\n(**Hint:** You will need to remove those where `cases == 0` and `county == Unknown`) (**Hint:** `filter`, `mutate`, `arrange`, `slice`)\n\n```{r}\nworst_death_ratio_county <- covid %>% filter(cases> 0, county != \"Unknown\") %>% mutate(death_case_ratio = 100 * (deaths / cases)) %>% arrange(desc(death_case_ratio)) %>% slice(1:5)\n```\n\n## Question 4:\n\nUse the `dplyr` verbs to report the **5** states with the *worst* current death/case ratio.\n\n(**Hint:** `filter`, `group_by`, `summarize`, `mutate`, `arrange`, `slice`)\n\n```{r}\nworst_death_ratio_state <- covid %>% filter(cases> 0, state != \"Unknown\") %>% mutate(death_case_ratio = 100 * (deaths / cases)) %>% arrange(desc(death_case_ratio)) %>% slice(1:5)\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## COVID-19 Data\n\n### Data\n\nWe are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like [this](https://www.nytimes.com/interactive/2020/us/coronavirus-spread.html?referringSource=articleShare), and are archived on a GitHub repo [here](https://github.com/nytimes/covid-19-data). Looking at the README in this repository we read:\n\n> \"We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography ... the historical files are the final counts at the end of each day ... The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available\"\n\nFor this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:\n\n```{r, eval = FALSE}\nhttps://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv\n```\n\n### Start\n\nI will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called \"url\"; and I am reading that URL into an object called `covid`\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nurl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'\ncovid = read_csv(url)\nhead(covid, 5)\n```\n\nHint: You can print the top X rows of a `data.frame` with `slice`.\n\n```{r, eval = FALSE}\nslice(covid, 1:5)\n```\n\nto print the top 5 columns of the raw covid `object`\n\n## Question 1:\n\nUse `dplyr` verbs to create a data.frame of the **5** counties with the most current cases. Remember, the cases and deaths are cumulative, so you only need to deal with the data for the most current (`max`) date.\n\n(**Hint:** `filter`, `arrange`, `slice`)\n\n```{r}\ncovid_recent <- covid %>% filter(date == max(date)) %>% arrange(desc(cases)) %>% slice(1:5)\n```\n\n## Question 2:\n\nUse `dplyr` verbs to create a data.frame of the **5** states with the *most* cases current cases.\n\n(**Hint:** `filter`, `group_by`, `summarize`, `arrange`, `slice`)\n\n```{r}\nmost_current_cases <-covid %>% filter(date == max(date)) %>% group_by(state) %>% summarize(total_cases = sum(cases, na.rm = TRUE)) %>% arrange(desc(total_cases)) %>% slice(1:5)\n```\n\n## Question 3:\n\nUse the `dplyr` verbs to report the **5** counties with the *worst* current death/cases ratio: (e.g.$100* (deaths/cases)$)\n\n(**Hint:** You will need to remove those where `cases == 0` and `county == Unknown`) (**Hint:** `filter`, `mutate`, `arrange`, `slice`)\n\n```{r}\nworst_death_ratio_county <- covid %>% filter(cases> 0, county != \"Unknown\") %>% mutate(death_case_ratio = 100 * (deaths / cases)) %>% arrange(desc(death_case_ratio)) %>% slice(1:5)\n```\n\n## Question 4:\n\nUse the `dplyr` verbs to report the **5** states with the *worst* current death/case ratio.\n\n(**Hint:** `filter`, `group_by`, `summarize`, `mutate`, `arrange`, `slice`)\n\n```{r}\nworst_death_ratio_state <- covid %>% filter(cases> 0, state != \"Unknown\") %>% mutate(death_case_ratio = 100 * (deaths / cases)) %>% arrange(desc(death_case_ratio)) %>% slice(1:5)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"day-6-exercise-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","title":"Ecosystem Science and Sustainability 330","author":[{"name":"Tayler Kordiak"}],"subtitle":"Quantitative Reasoning for Ecosystem Science"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}